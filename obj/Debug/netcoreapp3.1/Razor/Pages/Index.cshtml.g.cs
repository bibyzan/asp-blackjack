#pragma checksum "/Users/ben/github/asp/Blackjack/Pages/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d990ca3715755aacb3f955899a6bd1e948c42741"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Blackjack.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace Blackjack.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/ben/github/asp/Blackjack/Pages/_ViewImports.cshtml"
using Blackjack;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d990ca3715755aacb3f955899a6bd1e948c42741", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"94b4f67e5b8c481a5c3ad89b9d998246be3df801", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "/Users/ben/github/asp/Blackjack/Pages/Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Black Jack!</h1>

<div id=""input-content"" class=""row"">
    <div class=""col-md-4"">
        <div class=""form-group"">
            <label class=""control-label"">Name: </label>
            <input id=""player-name"" class=""form-control"" />
        </div>
        <div class=""form-group"">
            <input id=""start-game"" type=""submit"" value=""Start Game"" class=""btn btn-primary"" />
        </div>
    </div>
</div>
<div id=""game-content""/>

<script>
    let blackjack;

    const handHtml = (cards = []) => {
        let cardsHtml = '';
        for (let card of cards) {
            cardsHtml += `<img src=""http://localhost:5000/images/cards/${card.toString()}"" width=""50"" height=""70""/>\n`;
        }
        return cardsHtml;
    }

    const updateHtml = () => {
        const flexCol = 'style=""display: flex; flex-direction: column;flex: 1;""';
        const cardContainerStyle = 'style=""display: flex; flex-direction: row;flex: 1;""';

        const dealerCardsHtml = handHtml(blackjack.dealer.car");
            WriteLiteral(@"ds);
        const playerCardsHtml = handHtml(blackjack.playerHand.cards);

        let betHtml = '';
        if (blackjack.bet > 0) {
            betHtml = `<h5>bet: ${blackjack.bet}</h5>`;
        }

        $('#game-content')[0].innerHTML = `
            <h4>
                ${blackjack.player.chips} chips
            </h4>
            ${betHtml}
            <div style=""display: flex; flex-direction: row; width: 80%;"">
                <div ${flexCol}>
                    <h6>Dealer: ${blackjack.dealer.score}</h6>
                    <div ${cardContainerStyle}>${dealerCardsHtml}</div>
                </div>
                <div ${flexCol}>
                    <h6>${blackjack.player.name}: ${blackjack.playerHand.score}</h6>
                    <div ${cardContainerStyle}>${playerCardsHtml}</div>
                </div>
            </div>
            
        `;
    }

    const setStartGame = (showSave = false) => {
        if (!showSave) {
            const name = $('#player-name')[0].value;
      ");
            WriteLiteral(@"      blackjack.player.name = name;
        }
        $('#input-content')[0].innerHTML = `
                <div class=""col-md-4"">
                    <div class=""form-group"">
                        <label class=""control-label"">Bet: </label>
                        <input id=""player-bet"" class=""form-control"" />
                    </div>
                    <div class=""form-group"">
                        <input id=""start-bet"" type=""submit"" value=""Bet"" class=""btn btn-primary"" />
                        ${showSave ? '<input id=""highscore"" type=""submit"" value=""Save Highscore"" class=""btn btn-secondary"" />' : ''}
                    </div>
                </div>
            `;
        if (showSave) {
            $('#highscore')[0].addEventListener('click', () => {
                sessionStorage.setItem('wins', blackjack.player.wins);
                sessionStorage.setItem('name', blackjack.player.name);
                sessionStorage.setItem('losses', blackjack.player.losses);
                sessionStor");
            WriteLiteral(@"age.setItem('score', blackjack.player.chips);
                window.location.assign('Players/Create');
            });
        }
        $('#start-bet')[0].addEventListener('click', () => {
            blackjack.start();
            const bet = parseFloat($('#player-bet')[0].value);
            console.log(bet);
            if (!bet) {
                alert('Enter a valid number');
                return;
            } else if (bet > blackjack.player.chips) {
                alert('You are missing enough chips');
                return;
            }
            blackjack.betChips(bet);
            blackjack.turn();
            blackjack.turn();
            $('#input-content')[0].innerHTML = `
                <div class=""col-md-4"">
                    <div class=""form-group"">
                        <input id=""hit"" type=""submit"" value=""Hit"" class=""btn btn-primary"" />
                        <input id=""stay"" type=""submit"" value=""Stay"" class=""btn btn-secondary"" />
                    </div>
              ");
            WriteLiteral(@"  </div>
                `;
            const checkGameFinish = () => {
                if (blackjack.isGameOver()) {
                    if (blackjack.checkPlayerWin()) {
                        blackjack.player.wins++;
                    } else {
                        blackjack.player.losses++;
                    }
                    alert(blackjack.result(blackjack.check()));
                    setStartGame(true);
                }
            };
            $('#hit')[0].addEventListener('click', () => {
                blackjack.turn();
                updateHtml();
                checkGameFinish();
            });
            $('#stay')[0].addEventListener('click', () => {
                blackjack.turn(false);
                updateHtml();
                checkGameFinish();
            });
            updateHtml();
        })
        updateHtml();
    }

    window.addEventListener('load', function () {
        blackjack = new window.Blackjack();

        console.log(blackjack);
        conso");
            WriteLiteral("le.log($(\'#player-name\'));\n        $(\'#start-game\')[0].addEventListener(\'click\', () => {\n            setStartGame();\n        });\n    });\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
